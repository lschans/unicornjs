var redis = require('redis'),
    busmsg = require('unicorn//bus-msg'),
    Promise = require('es6-promise').Promise;

var service = {
    getAnswer: function(service, serviceRequired, functionName, value, pid, config) {

        return new Promise(function(resolve) {

            // This is where we should post crap to the bus and do some async wait thingys
            // Replace this crap and send it over the message bus
            var respondChannel = service+'Channel'+'_'+pid;
            var msg = busmsg.create(config.process.name, respondChannel, pid);

            msg.serviceRequired = serviceRequired;
            msg.function = functionName;
            msg.data.push = {"value": value};
            //create a client

            var publishClient = redis.createClient(config.redis.port, config.redis.server, {});
            var listenClient = redis.createClient(config.redis.port, config.redis.server, {});

            publishClient.publish('broker', JSON.stringify(msg));
            /* Listener waiting for the answer */
            listenClient.on("message", function (channel, message) {
                /* Process incoming message and respond to response channel */
                /* listen to the new channel */
                var obj = JSON.parse(message);

                console.log(obj);
                if (obj.ack == 0){
                    listenClient.unsubscribe();
                    listenClient.end();
                    resolve(obj.result);
                }
            });
            listenClient.subscribe(respondChannel);
        });
    }
};

module.exports = service;