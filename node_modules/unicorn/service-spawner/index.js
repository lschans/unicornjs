var Spawn = require('child_process').spawn;
var activeServices = [];
module.exports = function(config) {
    // Iterate over the list of services that need to start
    var brokerCounter = 0;
    config.brokers.map(function(broker) {
        config.process = broker;
        for(var brokerCount=0; brokerCount < broker.instances; brokerCount++) {
            // Spawn service as a child process
            var broker = Spawn('node', ['index.js', '--spawn', brokerCounter]);

            // Print data on the console when data comes in
            broker.stdout.on('data', function (data) {
                // Replace newlines, because data is a buffer and will print a newline for free
                console.log(data.toString().replace(/^\s+|\s+$/g, ''));
            });

            // Print errors on the console when errors comes in
            broker.stderr.on('data', function (data) {
                // Replace newlines, because data is a buffer and will print a newline for free
                console.log(data.toString().replace(/^\s+|\s+$/g, ''));
            });

            // Print info when a process exits
            broker.on('close', function (code) {
                console.log('child process exited with code ' + code);
            });

            activeServices.push({service:broker, name:broker.name, pid:broker.pid});
        }
        brokerCounter++;
    });

    // Nasty hack, but sleep for a while, then continue

    setTimeout(function(){
        var serviceCounter = 0;
        config.services.map(function(service) {
            config.process = service;
            for(var instanceCount=0; instanceCount < service.instances; instanceCount++) {
                // Spawn service as a child process
                var instance = Spawn('node', ['index.js', '--spawn', serviceCounter]);

                // Print data on the console when data comes in
                instance.stdout.on('data', function (data) {
                    // Replace newlines, because data is a buffer and will print a newline for free
                    console.log(data.toString().replace(/^\s+|\s+$/g, ''));
                });

                // Print errors on the console when errors comes in
                instance.stderr.on('data', function (data) {
                    // Replace newlines, because data is a buffer and will print a newline for free
                    console.log(data.toString().replace(/^\s+|\s+$/g, ''));
                });

                // Print info when a process exits
                instance.on('close', function (code) {
                    console.log('child process exited with code ' + code);
                });

                activeServices.push({service:instance, name:service.name, pid:instance.pid});
            }
            serviceCounter++;
        });
    }, 2000);
};