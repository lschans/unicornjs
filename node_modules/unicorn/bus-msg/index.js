/*
 * bus_msg.js
 * Define the messages, verify and validate messages
 */
/* Require packages*/
var Joi     = require('joi');

/* Message Schema for Joi Validation */

var msgTemplate = Joi.object().keys({
    ack : Joi.number(),
    msgpid : Joi.number(),
    mesgUuiID:   Joi.string().length(40).required(),
    timestamp:  Joi.number().integer().required(),
    serviceID : Joi.string(),
    respondChannel: Joi.string(),
    "serviceRequired" : Joi.string(),
    "function" : Joi.string(),
    brokerChain: Joi.array().items(Joi.object().keys({
        brokerID: Joi.string(),
        timestamp: Joi.number().integer()
    })),
    data: Joi.object(),
    error: Joi.object().keys({
        errorID: Joi.number().integer(),
        message: Joi.string()
    })
});

//{"ack" : 0,"msgpid":1234,"mesgUuiID":"id", "timestamp":0, "serviceID":"testID","respondChannel":"test","brokerChain":[],"data": [],"error":{"errorID":0,"message":"Default"}}

    /* Empty Template to get fill */
    var emptyMsg = {
        "ack": 0,
        "msgpid": 0,
        "mesgUuiID": "",
        "timestamp": 0,
        "serviceID": "",
        "respondChannel": "",
        "brokerChain": [],
        "serviceRequired": "",
        "function": "",
        "data": {},
        "error": {
            "errorID": 0,
            "message": "Default"
        }
    };

var service = {
    create:function(serviceID, respondChannel, pid) {
        // Create a message using the template

        var message = emptyMsg;
        message.ack = 0;
        message.serviceID = serviceID;
        message.msgpid = pid;
        message.respondChannel = respondChannel;
        message.serviceRequired = ' ';
        message.function = ' ';
        message.mesgUuiID = '1234567890123456789012345678901234567890';//crypto.createHash('sha1');
        message.timestamp = Math.round((new Date()).getTime() / 1000);

        Joi.validate(message,msgTemplate, function (err, value) {
            if (err) console.log(err);
            //return object
            msg = value;
        });

        return message;

    },
    parse:function(msg){
        // Parse a message and see if everything went ok, return the data part
        var data = {};
        Joi.validate(msg, msgTemplate, function (err, value) {
            data = value.data;
        });  // err === null -> valid

        return data;
    },
    verify:function(msg){

        var message = {};
        // Verify a message and see if the syntax is ok
        Joi.validate(msg, msgTemplate, function (err, value) {
            if (err) return err;
            else
                message = value;
        });  // err === null -> valid
        return msg;
    }
};

module.exports = service;

