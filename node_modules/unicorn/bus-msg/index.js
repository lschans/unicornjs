/*
 * busmsg.js
 * Define the messages, verify and validate messages
 */
/* Require packages*/
var crypto  = require('crypto'),
    Joi     = require('joi');

/* Message Schema for Joi Validation */
var msgTemplate = Joi.object().keys({
        mesgUuiID:   Joi.string().length(40).required(),
        timestamp:  Joi.number().integer().required(),
        userID:     Joi.number().integer().required(),
        sessionHash: Joi.string().required(),
        companyID:  Joi.number().integer().required(),
        serviceID:  Joi.string().required(),
        respondChannel: Joi.string().required(),
        requestURL: Joi.string(), // add a regular expression
        brokerChain: Joi.array().items(Joi.object().keys({
            brokerID: Joi.string(),
            timestamp: Joi.number().integer()
        })),
        type: Joi.string(), // add a regular expression
        data: Joi.array().items(Joi.object()),
        error: Joi.object().keys({
            errorID: Joi.number().integer(),
            message: Joi.string()
        })
});

/* Empty Template to get fill */
var emptymsg = {
    "msgpid":0,
    "mesgUuiID":"",
    "timestamp":0,
    "userID":0,
    "sessionHash":"",
    "companyID":0,
    "serviceID":"",
    "respondChannel":"",
    "requestURL":"",
    "brokerChain":[],
    "type":"",
    "data": [],
    "error":{
        "errorID":0,
        "message":"Default"
    }
};

var service = {
    create:function(userid, sessionHash, companyID, serviceID, respondChannel, requestURL, type){
        // Create a message using the template

        var msg = {};

        var message = emptymsg;
            message.msgpid = process.pid;
            message.mesgUuiID = '1234567890123456789012345678901234567890';//crypto.createHash('sha1');
            message.timestamp = Math.round((new Date()).getTime() / 1000);
            message.userID      = userid;
            message.sessionHash  = sessionHash;
            message.companyID   = companyID;
            message.serviceID   = serviceID;
            message.respondChannel = respondChannel;
            message.requestURL = requestURL;
            message.type = type;

        Joi.validate(message,msgTemplate, function (err, value) {
            if (err) console.log(err);
            //return object
            msg = value;
        });
        return msg;

    },
    parse:function(msg){
        // Parse a message and see if everything went ok, return the data part
        var data = {};
        Joi.validate(msg, msgTemplate, function (err, value) {
            data = value.data;
        });  // err === null -> valid

        return data;
    },
    verify:function(msg){

        var msg = {};
        // Verify a message and see if the syntax is ok
        Joi.validate(msg, msgTemplate, function (err, value) {
            msg = value;
        });  // err === null -> valid

        return msg;
    }
};

module.exports = service;


//var lala = service.create(101,'abcdefghijklmnopqrstuvwxyz',202,'serviceID', 'channelResponse', 'GET');
//
//lala.data.push({"field1":"payload"});
//
//console.log(service.parse(lala));
//console.log(service.verify(lala));
//var msgTemplate ={
//    "mesgUuiID":"hash",
//    "timestamp":"unixtime",
//    "userID":"int",
//    "sessionHash":"string",
//    "companyID":"int",
//    "serviceID":"string",
//    "respondChannel":"string",
//    "requestURL":"string",
//    "brokerChain":[
//        {"brokerID":"int", "timestamp":"unixtime"}
//    ],
//    "type":"POST/GET/DELETE",
//    "data": [
//        {"field1":"payload"},
//        {"field2":"payload"},
//        {"field3":"payload"}
//    ],
//    "error":{
//        "errorID":"int",
//        "message":"string"
//    }
//};